метод Скрипт()
    // Создаем граф в виде соответствия:
    // Ключ — узел (вершина), значение — массив соседних узлов (связей)
    знч Граф = <Строка, Массив<Строка>>{
        "A": ["B", "C"],   // Из A можно перейти в B и C
        "B": ["D", "E"],   // Из B можно перейти в D и E
        "C": ["F"],        // Из C можно перейти только в F
        "D": <Строка>[],   // D — тупиковая вершина (нет соседей)
        "E": ["F"],        // Из E можно перейти в F
        "F": <Строка>[]    // F — конечная вершина (нет соседей)
    }  

    // Создаем множество, где будем хранить уже посещённые узлы,
    // чтобы избежать зацикливания при обходе
    знч Посещенные = новый Множество<Строка>()

    // Запускаем поиск в глубину (DFS) из вершины "A" в вершину "F"
    ПоискВШирину(Граф, "A", "F", Посещенные)
;

метод ПоискВШирину(Граф: Соответствие<Строка, Массив<Строка>>, Узел: Строка, Цель: Строка, Посещенные: Множество<Строка>): Булево
    
    // Добавляем текущий узел в множество посещённых
    Посещенные.Добавить(Узел)

    // Выводим информацию о текущем узле для наглядности
    Консоль.Записать("Посещаем: " + Узел)
    
    // Проверяем, достигли ли мы целевого узла
    если Узел == Цель
        Консоль.Записать("Найден узел: " + Цель)
        // Если нашли — возвращаем Истина, чтобы завершить рекурсию
        возврат Истина
    ;

    // Перебираем всех соседей текущего узла
    для Сосед из Граф[Узел]

        // Если соседний узел ещё не посещён
        если не Посещенные.Содержит(Сосед)

            // Рекурсивно вызываем поиск в глубину для соседа
            если ПоискВШирину(Граф, Сосед, Цель, Посещенные)
                // Если поиск вернул Истина (цель найдена),
                // прекращаем дальнейший обход и возвращаем Истина вверх по стеку
                возврат Истина
            ;
        ;
    ;

    // Если среди всех соседей цель не найдена — возвращаем Ложь
    возврат Ложь
;
